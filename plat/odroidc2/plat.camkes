/*
 * Copyright (C) 2022, HENSOLDT Cyber GmbH
 * Copyright 2018, Data61, CSIRO (ABN 41 687 119 230)
 *
 * SPDX-License-Identifier: BSD-2-Clause
 *
 *
 * Platform specific settings for Odroid C2
 *
 *    0x8000'0000 +---------------------------------------------+
 *                | 3328 MiB for seL4 kernel, VMM and apps      |
 *    0x3000'0000 +---------------------------------------------+
 *                |                                             |
 *                |  0x3000'0000 +-------------------+          |
 *                |              | 4 MiB for DTB     |          |
 *                |  0x2fc0'0000 +-------------------+          |
 *                |              | 28 MiB for initrd |          |
 *                |  0x2e00'0000 +-------------------+          |
 *                |              | free              |          |
 *                |              +-------------------+          |
 *                |              | kernel            |          |
 *                |  0x2008'0000 +-------------------+          |
 *                |              | 512 KiB free      |          |
 *                |  0x2000'0000 +-------------------+          |
 *                |                                             |
 *                |  256 MiB for VM's emulated physical memory  |
 *                |                                             |
 *    0x2000'0000 +---------------------------------------------+
 *                | 512 MiB for seL4 kernel, VMM and apps       |
 *    0x0000'0000 +---------------------------------------------+
 *
 * With the current images, the actual memory usage within the VM is:
 *
 *    0x2008'0000 - 0x2150'1a00: about 21 MiB, linux kernel
 *    0x2e00'0000 - 0x2eb8'1a00: about 12 MiB, initrd
 *    0x2fc0'0000 - 0x2fc5'0000: 320 KiB, generated DTB

 */

#define VM_RAM_PADDR_BASE   0x20000000
#define VM_RAM_BASE         VM_RAM_PADDR_BASE // aim for a 1:1 mapping
#define VM_RAM_SIZE         0x10000000 // 256 MiB (= 2^28)

#define VM_INITRD_ADDR      0x2e000000
#define VM_DTB_ADDR         0x2fc00000



assembly {
    composition {
        /* empty */
    }

    configuration {

        // DTB content
        //      aliases {
        //         serial0 = "/soc/bus@c8100000/serial@4c0";
        //         ethernet0 = "/soc/ethernet@c9410000";
        //      };
        //
        //      chosen {
        //         stdout-path = "serial0:115200n8";
        //      };
        vm0.dtb = dtb([
            {}
            //{"path": "/soc/bus@c8100000/serial@4c0"},
            //{"path": "/soc/ethernet@c9410000"},
        ]);

        vm0.mmios = [
            "0xc4306000:0x1000:12", // Interrupt Controller Virtual CPU interface (VM view)
        ];

        vm0.untyped_mmios = [
            "0x20000000:28", // physical memory for VM RAM
        ];

        vm0.vm_address_config = {
            "ram_paddr_base": VAR_STRINGIZE(VM_RAM_PADDR_BASE),
            "ram_base":       VAR_STRINGIZE(VM_RAM_BASE),
            "ram_size":       VAR_STRINGIZE(VM_RAM_SIZE),
            "dtb_addr":       VAR_STRINGIZE(VM_DTB_ADDR),
            "initrd_addr":    VAR_STRINGIZE(VM_INITRD_ADDR),

            /* This is not only the entry address, but also the load address
             * in case the kernel image is a binary.
             */
            "kernel_entry_addr": VAR_STRINGIZE(VM_RAM_BASE),
        };

        vm0.vm_image_config = {

            "map_one_to_one": true,
            "clean_cache": false, /* not needed */

            "provide_initrd": true,
            "generate_dtb": true,
            "provide_dtb": false,


            "kernel_name": "linux",
            "initrd_name": "linux-initrd",

            "dtb_name": "linux-dtb",
            "dtb_base_name": "",

            "kernel_bootcmdline": "nosmp debug loglevel=8 console=/pl011@f9000000 earlycon=pl011,mmio32,0xf9001000",
                // console=hvc0
                // earlycon=pl011,mmio32,0xf9000000
                // nosmp
                // rw       (Mount root device read-write on boot)
                // debug    (Enable kernel debugging, events log level)
                // loglevel=8
                //     0 (KERN_EMERG)          system is unusable
                //     1 (KERN_ALERT)          action must be taken immediately
                //     2 (KERN_CRIT)           critical conditions
                //     3 (KERN_ERR)            error conditions
                //     4 (KERN_WARNING)        warning conditions
                //     5 (KERN_NOTICE)         normal but significant condition
                //     6 (KERN_INFO)           informational
                //     7 (KERN_DEBUG)          debug-level messages
                // ignore_loglevel
                // root=/dev/ram0
                // pci=nomsi,realloc=off,bios
                // initcall_blacklist=clk_disable_unused
                // "",


            "kernel_stdout": "/pl011@f9000000",
                // "/soc/bus@c8100000/serial@4c0"
                // hvc0
        };
    }
}
